// getDirectoryItems()
var files = love.filesystem.getDirectoryItems("/")
var foundUnitChai = false
for (file : files) {
	if (file == "assert.chai") {
		foundUnitChai = true
	}
}
assert(foundUnitChai, "love.filesystem.getDirectoryItems()")

// read()
var contents = love.filesystem.read("main.chai")
var needle = "Unit Testing Framework"
var found = contents.find(needle)
assert(found > 50, "love.filesystem.read()")

// exists()
assert(love.filesystem.exists("math.chai"), "love.filesystem.exists('math.chai')")
assert(!love.filesystem.exists("notexist.chai"), "    On non existant file")

// getSize()
assert(love.filesystem.getSize("filesystem.chai") > 10, "love.filesystem.getSize()")
assert_equal(love.filesystem.getSize("notexist.chai"), -1, "    On non existant file")

// isFile()
assert(love.filesystem.isFile("filesystem.chai"), "love.filesystem.isFile()")
assert(!love.filesystem.isFile("notexist.chai"), "    On non existant file")

// isDirectory()
assert_not(love.filesystem.isDirectory("keyboard.chai"), "love.filesystem.isDirectory()")

// isSymlink()
assert_not(love.filesystem.isSymlink("keyboard.chai"), "love.filesystem.isSymlink()")

// getDirectoryItems()
var getDirectoriesItems = love.filesystem.getDirectoryItems("assets").size()
assert_equal(getDirectoriesItems, 6, "love.filesystem.getDirectoryItems()")

// lines()
var theLines = love.filesystem.lines("filesystem.chai")
assert_equal(theLines[0], "// getDirectoryItems()", "love.filesystem.lines()")

// getInfo()
var fileInfo = love.filesystem.getInfo("keyboard.chai")
assert_not(fileInfo.is_var_null(), "love.filesystem.getInfo()")
assert_equal(fileInfo.type, "file", "    .type")
assert_greater(fileInfo.size, 5, "    .size")

// newFileData()
var loadedFileData = love.filesystem.newFileData("filesystem.chai")
assert_not(loadedFileData.is_var_null(), "love.filesystem.newFileData()")
assert_greater(loadedFileData.getSize(), 10, "    .getSize()")
assert_equal(loadedFileData.getExtension(), "chai", "    .getExtension()")
assert_equal(loadedFileData.getFilename(), "filesystem.chai", "    .getFilename()")
var fileDataContents = loadedFileData.getString()
var fileDataFind = fileDataContents.find("// newFileData()")
assert_greater(fileDataFind, 50, "    .getString()")
var newFileData = love.filesystem.newFileData("Hello World!", "helloworld.txt")
assert_equal(newFileData.getString(), "Hello World!", "    newFileData.getString()")

// getSaveDirectory()
assert_equal(love.filesystem.getSaveDirectory(), "/libretro/saves", "love.filesystem.getSaveDirectory()")

// createDirectory()
var createDirectoryReturn = love.filesystem.createDirectory("test/unittests/createDirectoryTest")
assert(createDirectoryReturn, "love.filesystem.createDirectory()")

// write()
var writeFileReturn = love.filesystem.write("test/unittests/createDirectoryTest/test.md", "# Test\n\nHello World!");
assert(writeFileReturn, "love.filesystem.write()")

// remove()
assert(love.filesystem.exists("createDirectoryTest/test.md"), "love.filesystem.remove()")
assert(love.filesystem.exists("createDirectoryTest"), "    directory exists")
assert(love.filesystem.remove("test/unittests/createDirectoryTest/test.md"), "    remove file")
assert_not(love.filesystem.exists("createDirectoryTest/test.md"), "    file is gone")
assert(love.filesystem.remove("test/unittests/createDirectoryTest"), "    remove directory")
assert_not(love.filesystem.exists("createDirectoryTest"), "    directory is gone")

// mount()
var mountResult = love.filesystem.mount("assets/hello.zip", "hello")
assert(mountResult, "love.filesystem.mount()")

// mount() - Load
var mountLoadResult = love.filesystem.read("hello/hello.txt")
var mountLoadResultType = is_type(mountLoadResult, "string")
assert(mountLoadResultType, "    read()")
if (mountLoadResultType) {
	assert_equal(mountLoadResult.trim(), "Hello World!", "    contents")
}

// unmount()
love.filesystem.unmount("assets/hello.zip")
assert_not(love.filesystem.exists("hello/hello.txt"), "love.filesystem.unmount()")

// require()
global requiretestFileLoaded = false
var requireReturn = require("assets.requiretest")
assert(requireReturn, "require()")
assert(requiretestFileLoaded, "    global")
requiretestFileLoaded = false
requireReturn = require("assets.requiretest")
assert(requireReturn, "    double call")
assert_not(requiretestFileLoaded, "    not loaded twice")

// require() - dir/init.chai
requiretestFileLoaded = false
require("assets")
assert(requiretestFileLoaded, "    loaded assets/init.chai")

// getFileExtension()
assert_equal(love.filesystem.getFileExtension("/opt/var/something.txt"), "txt", "love.filesystem.getFileExtension()")
assert_equal(love.filesystem.getFileExtension("/opt/var/something.tar.gz"), "gz", "love.filesystem.getFileExtension()")

// getBasename
assert_equal(love.filesystem.getBasename("/opt/var/something.txt"), "something.txt", "love.filesystem.getBasename()")
assert_equal(love.filesystem.getBasename("something.txt"), "something.txt", "love.filesystem.getBasename()")

// getParentDirectory
assert_equal(love.filesystem.getParentDirectory("/opt/var/something.txt"), "/opt/var", "love.filesystem.getParentDirectory()")
assert_equal(love.filesystem.getParentDirectory("something.txt"), "", "love.filesystem.getParentDirectory()")
