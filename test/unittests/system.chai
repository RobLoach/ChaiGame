// getOS()
var os = love.system.getOS()
assert_not_equal(os, "", "love.system.getOS()")

// getVersionString()
var version = love.system.getVersionString()
assert_equal(version[1], '.', "love.system.getVersionString()")

// getVersion()
var versionNumber = love.system.getVersion()
assert_equal(versionNumber[0], 2, "love.system.getVersion()")

// getUsername()
var username = love.system.getUsername()
assert(true, "love.system.getUsername() == '" + username + "'")

// setClipboardText()
love.system.setClipboardText("Hello World!")

// getClipboardText
assert_equal(love.system.getClipboardText(), "Hello World!", "love.system.getClipboardText()")

// string::replace()
var replaceSubject = "Hello World! Hello World!"
var newReplaceString = replaceSubject.replace("World", "Space")
assert_equal(newReplaceString, "Hello Space! Hello Space!", "string::replace(string, string)")
newReplaceString = replaceSubject.replace('!', '.')
assert_equal(newReplaceString, "Hello World. Hello World.", "string::replace(char, char)")

// string::trim()
var trimSubject = "   Hello World!   "
assert_equal(trimSubject.trim(), "Hello World!", "string::trim()")

// string::split()
var splitTest = "Hello|How|Are|You"
var splitResult = splitTest.split("|")
assert_equal(splitResult[1], "How", "string::split()")
splitTest = "Hello, World, Time"
splitResult = splitTest.split(", ")
assert_equal(splitResult[1], "World", "    - commas")

// conf.chai
var objs = get_objects()
var confTestLoadedExists = objs["confTestLoaded"].get_type_info().bare_equal(bool_type)
assert(confTestLoadedExists, "conf.chai is loaded")
if (confTestLoadedExists) {
	assert(confTestLoaded, "conf() called")
}
